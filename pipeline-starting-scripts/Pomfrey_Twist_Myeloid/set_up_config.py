#!/bin/python3

import shutil
import sys
import argparse
from os.path import isfile
import subprocess

## Input arguments
# Initilizing parser
msg = "Script to create config-file for Pomfrey pipeline"
parser = argparse.ArgumentParser(description=msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
# Adding arguments
parser.add_argument("-i", "--input", help="Default config yaml-file to add your sample etc to", required=True)
parser.add_argument(
    "-s", "--sequenceid", help="Sequence id or run, which is used in naming the output files generated by Pomfrey", required=True
)
parser.add_argument("-o", "--output", help="output config.yaml filename", default="SEQUENCEID_config.yaml")
parser.add_argument(
    "-S",
    "--samplesheet",
    help="""SampleSheet.csv with samplenames in table. First column need to be samplename and the last column must be defined as 
        WP2_TM_X, otherwise the line will be skipped""",
    default="SampleSheet.csv",
)
parser.add_argument("-r1", "--read1-ending", help="Ending of fastq read1 to be used", default="R1_001.fastq.gz")
parser.add_argument("-f", "--fastq-folder", help="Folder that contains fastqfiles", default="fastqs/")

# parse args
args = parser.parse_args()
if args.output == "SEQUENCEID_config.yaml" :
    args.output = args.sequenceid + "_config.yaml"
# print(args)

# Cp default/input config to current dir to add samples to
shutil.copyfile(args.input, args.output)

# Create samples list
with open(args.samplesheet, "r") as file:
    samplelines = [line.strip().split(",") for line in file if "wp2_tm" in line.strip().split(",")[-1].lower()]
    samples = list(set([x[0] for x in samplelines]))

# Add samples and sequenceid to config
with open(args.output, "a") as configfile:
    configfile.write('\nseqID: \n    sequencerun: "' + args.sequenceid + '"\n')
    configfile.write("samples: \n")
    for samplename in samples:
        # Check that R1 file exists
        read1_cmd = "ls " + args.fastq_folder + samplename + "_*" + args.read1_ending
        read1 = subprocess.run(read1_cmd, stdout=subprocess.PIPE, shell="TRUE").stdout.decode("utf-8").strip()
        if isfile(read1):
            configfile.write('    "' + samplename + '": "' + read1 + '"\n')
        else:
            sys.exit(
                '"'
                + read1_cmd
                + '" contains multiple hits or returns no hits. Could --read1-ending or --fastq-folder be incorrect?'
            )
